playbook配置文件

 1.执行配置文件

Playbook配置文件使用YAML语法，具有简介明了，结构清晰等特点。
Playbook 配置文件类似于shell 脚本，是一个YAML格式的文件，用于保存针对特定需求的任务列表，前面介绍的ansible 命令虽然可以完成各种任务，
但是当配置一系列任务时， 逐条输入命令就显得效率非常低下，更有效的方式在playbook 配置中配置所有的任务代码，
利用 ansible-playbook 命令执行该文件，可以实现自动化运维，YAML文件的扩展名通常为.yaml或.yml
YAML语法和其他高级语言类似，其结构通过缩进来展示，通过"-"来代表选项，通过冒号 ":" 来分隔键和值。
整个文件以"---"开始并以"..."结束，如下所示：

修改hosts文件

[root@benet ~]# vim /etc/ansible/hosts
 在最后一行写入：
[test01]
192.168.100.200

[test02]
192.168.100.201

[root@benet ~]# vim /etc/ansible/test1.yml
---
- hosts: test01
  remote_user: root
  tasks:
    - name: adduser
      user: name=user2 state=present
      tags:
      - testa
    - name: addgroup
      group: name=tests system=yes
      tags:
      - testb

- hosts: test02
  remote_user: root
  tasks:
    - name: cf
      copy: src=/etc/passwd dest=/home
      tags:
      - testc
...

------------------------------------------------------------------------------------------------------
---                                                               #开头格式（可忽略）#
- hosts: test01                                             #表示对test01（192.168.100.200）的操作#
  remote_user: root                                     #远端执行用户身份 root#     
  tasks:                                                        #任务列表#
    - name: adduser                                     #任务名称#
      user: name=user2 state=present           #执行 user 模块创建用户#
      tags:                                                       #创建 tag 标签#
      - testa                                                     #tag 标签为 testa #
    - name: addgroup                                  #任务名称#
      group: name=tests system=yes            #执行 group 模块创建组#
      tags:                                                       #创建 tag 标签#
      - testb                                                     #tag 标签为 testb#

- hosts: test02                                                #表示对test02（192.168.100.201）的操作#
  remote_user: root                                        #远端执行用户身份 root#     
  tasks:                                                            #任务列表#
    - name: cf                                                  #任务名称#
      copy: src=/etc/passwd dest=/home         #执行 copy 模块复制文件#
      tags:                                                          #创建 tag 标签#
      - testc                                                        #tag 标签为testc#
...                                                                     #结尾格式（可忽略）#
------------------------------------------------------------------------------------------------------------------------
【所有的“-”和“：”后面均有空格，而且要注意缩进和对齐】


Playbook的核心元素包含: 
1. hosts: 任务的目标主机，多个主机用冒号分隔，一 般调用/etc/ansible/hosts 中的分组信息
2. remote_user:远程主机上，运行此任务的什么默认为roote
3. tasks: 任务，即定义的具体任务，由模块定义的操作列表
4. handlers:触发器，类似tasks，只是在特定的条件下才会触发任务。某任务的状态在运行后为changed时，可通过“notify"通知给相应的handlers 进行触发执行。
5. roles: 角色，将hosts剥离出去，由tasks, handlers等所组成的一 种特定的结构集合

playbook命令用法如下：
用法: ansible-playbook [option] /PATH/TO/PLAYBOOK.yaml
其中[option]部分的功能包括
1. --syntax check:           #检测yaml文件的语法
2.-C (--check):                #测试，不会改变主机的任何配置
3. --list-hosts:                 #列出yaml文件影响的主机列表
4. --lit-tasks:                   #列出yaml文件的任务列表
5. --list-tags:                  #列出yaml文件中的标签
6. -t TAGS (--tags=TAGS):            #表示只执行指定标签的任务
7. --skip-tags=SKIP_TAGSS:          #表示除了指定标签任务，执行其他任务
8. --start-at-task=START_AT:        #从指定任务开始往下运行

实验案例
1.语法检查
[root@benet ~]# ansible-playbook --syntax-check /etc/ansible/test1.yml 
  显示以下信息表示语法正确
playbook: /etc/ansible/test1.yml


[root@benet ~]# ansible-playbook -C /etc/ansible/test1.yml 
               #预执行一下，不会改变主机的任何配置#

[root@benet ~]# ansible-playbook --list-hosts /etc/ansible/test1.yml 
               #列出主机（会对哪些主机产生影响）#

[root@benet ~]# ansible-playbook --list-tasks /etc/ansible/test1.yml 
               #列出具体有哪些任务#

[root@benet ~]# ansible-playbook --list-tags /etc/ansible/test1.yml 
                 #列出有哪些标签#

[root@benet ~]# ansible-playbook  /etc/ansible/test1.yml       #执行#
===============================================================
2.触发器
需要触发才能执行的任务，当之前定义在tasks中的任务执行完成后，若希望在基础上触发其他的任务，这时就需要定义handlers
例如，当通过ansible的模块对目标主机的配置文件进行修改之后，如果任务执行成功，可以触发一个触发器，在触发器中定义目标主机的服务重启操作，以使配置文件生效，
handlers 触发器具有以下优点：
1. handlers 是Ansible 提供的条件机制之一，handlers 和task很类似，但是他在被task 通知的时候才会触发执行
2. handlers 只会在所有任务执行完成后执行，而且即使被通知了多次，它也只会执行一次，handlers按照定义的顺序依次执行

hanglers触发器的使用示例如下：
[root@benet ~]# cat /etc/ansible/httpd.yml
---
- hosts: crushlinux
  remote_user: root
  tasks:
    - name: xxx
      command: sed -i 's/Listen 80/Listen 8080/g' /etc/httpd/conf/httpd.conf
      notify: 
        - rehttpd
  handlers: 
    - name: rehttpd
      service: name=httpd state=restarted
...
-----------------------------------------------------------------------------------------------------
---                                             #开头#
- hosts: crushlinux                      #指定运行主机为 test01 组#
  remote_user: root                    #指定对端运行用户的身份#
  tasks:                                        #任务列表#
    - name: xxx                            #定义任务名称#
      command: sed -i 's/Listen 80/Listen 8080/g' /etc/httpd/conf/httpd.conf         #模块为 command： 使用 sed 命令替换监听端口为 8080#
      notify:                 #完成任务后调用 restart httpd server 触发器#
        - rehttpd
  handlers:                        #配置触发器#
    - name: rehttpd
      service: name=httpd state=restarted
...
-----------------------------------------------------------------------------------------------------
[root@benet ~]# ansible-playbook -C /etc/ansible/httpd.yml 
                #预执行一下，不会改变主机的任何配置#
[root@benet ~]# ansible-playbook  /etc/ansible/httpd.yml      #执行#

被管理主机：
[root@q1 ~]# netstat -lnpt | grep :8080
tcp6       0      0 :::8080                 :::*                    LISTEN      6328/httpd          


============================================
3.角色
将多种不同的tasks的文件集中存储在某个目录下，则该目录就是角色，
角色一般存放在/etc/ansible/roles/目录中，可通过ansible 的配置文件来调整默认的角色目录
/etc/ansible/roles目录下有很多的子目录，其中每一个子目录对应一个角色，每个角色也有自己的目录结构


每个角色的定义，以特定的层级目录结构进行组织：
1. files: 存放copy或script等模块调用的文件
2. templates: 存放template 模块查找所需要的模板文件的目录，如mysql 配置文件等模板
3. tasks: 任务存放目录
4. handlers: 存放相关触发执行器的目录
5. vars:变量存放的目录
6. meta:用于存放此角色元数据
7. default: 默认变量存放目录，文件中定义了此角色使用的默认变量

上述目录中tasks, handlers, vars，meta，default至少应该包含一个main.yml， 
该目录下也可以有其他的yml文件，但是需要在main.yml文件中用 include 指定将其他.yml文件包含进来

有了角色之后，可以直接在yaml文件中(playbook 配置文件)中调用角色示例如下：
- hosts: test01
   remote_user: root
   roles: 
       - mysql        #调用角色名#
       - httpd        #调用角色名#

实验案例
下面通过一个实例配置数据库角色，要求被管理主机自动安装Mariadb,
安装完成后上传提前准备好的配置文件到远端主机，重启服务,然后新建testdb数据库，并允许test用户对其拥有所有权限

[root@benet ~]# mkdir -p /etc/ansible/roles/mariadb/{files,tasks,handlers}
[root@benet ~]# vim /etc/ansible/mariadb.yml
---
- hosts: crushlinux
  remote_user: root
  roles: 
    - mariadb

...

[root@benet ~]# cd /etc/ansible/roles/mariadb/
[root@benet mariadb]# vim tasks/main.yml
---
- name: install mariadb
  yum: name=mariadb-server state=present
- name: move config file
  shell: "[ -e /etc/my.cnf ] && mv /etc/my.cnf /etc/my.cnf.bak"
- name: provide a new config file
  copy: src=my.cnf dest=/etc/my.cnf
- name: reload mariadb
  shell: systemctl restart mariadb
- name: create database testdb
  shell: mysql -u root -e "create database testdb;grant all privileges on testdb.* to 'test'@'192.168.100.%' identified by 'test123';flush privileges;"
  notify: 
  - restart mariadb
...
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
---              #开头格式#
- name: install mariadb                  #指定任务名称安装mariadb数据库#
  yum: name=mariadb-server state=present     #执行yum模块安装mariadb#
- name: move config file                                   #指定任务名称移除原有配置文件#
  shell: "[ -e /etc/my.cnf ] && mv /etc/my.cnf /etc/my.cnf.bak"                  #判断有就移除#
- name: provide a new config file                          #创建一个新的配置文件#
  copy: src=my.cnf dest=/etc/my.cnf              #src源会自动到files文件去找my.cnf文件#
- name: reload mariadb                                       #指定任务名称为重启mariadb#
  shell: systemctl restart mariadb                             #模块重启#
- name: create database testdb                             #按要求添加执行如下sql语句#
  shell: mysql -u root -e "create database testdb;grant all privileges on testdb.* to 'test'@'192.168.100.%' identified by 'test123';flush privileges;"
  notify:           #配置触发器#
  - restart mariadb    #为重启mariadbe#
...
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
[root@benet mariadb]# vim handlers/main.yml
- name: restart mariadb
  service: name=mariadb state=restarted

[root@benet mariadb]# cd files/
[root@benet files]# cp /etc/my.cnf ./
[root@benet files]# vim my.cnf   # 不用修改任何东西 #
[root@benet files]# cd /etc/ansible/roles/
[root@benet roles]# tree


[root@benet files]# ansible-playbook -C /etc/ansible/mariadb.yml    #预执行#
[root@benet files]# ansible-playbook  /etc/ansible/mariadb.yml    #执行#

被管理主机测试：
[root@q1 ~]# systemctl status mariadb.service    #显示服务开启#
[root@q1 ~]# mysql
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
| testdb             |
+--------------------+
5 rows in set (0.00 sec)

MariaDB [(none)]> use mysql
MariaDB [mysql]> select user from user;
+------+
| user |
+------+
| root |
| test |
| root |
|      |
| root |
|      |
| root |
+------+
7 rows in set (0.00 sec)


